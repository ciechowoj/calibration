from numpy import *
from numpy.linalg import *
from util import *

def sample_cube(num, center = array([0, 0, 0]), size = 1):
    result = (random.rand(3, num).T - array([0.5] * 3)) * size + center
    result = hstack((result, ones((num, 1))))
    return result.T

def sample_sphere(num, center = [0, 0, 0], radius = 1):
    result = []
    center = array(center)

    while len(result) < num:
        sample = (random.rand(3) - 0.5) * 2.0 * radius

        if norm(sample) < radius:
            result.append(sample)

    return hstack((result, ones((num, 1)))).T

def make_cube(num, center = array([0, 0, 0]), size = 5):
    num = num // 6

    size = array(size)

    points =                 sample_cube(num, center = size * [0, -0.5, 0], size = size * [1, 0, 1])
    points = hstack((points, sample_cube(num, center = size * [0, 0.5, 0], size = size * [1, 0, 1])))
    points = hstack((points, sample_cube(num, center = size * [-0.5, 0.0, 0], size = size * [0, 1, 1])))
    points = hstack((points, sample_cube(num, center = size * [0.5, 0.0, 0], size = size * [0, 1, 1])))
    points = hstack((points, sample_cube(num, center = size * [0, 0.0, -0.5], size = size * [1, 1, 0])))
    points = hstack((points, sample_cube(num, center = size * [0, 0.0, 0.5], size = size * [1, 1, 0])))

    return (points.T + append(center, 0)).T

def make_test_points():
    return array([[
    -2.37022640e+00 ,  2.31625705e+00 , -2.19195884e+00 , -1.71836673e+00,
    2.62451112e-01  ,-7.62759319e-01  , 1.80625288e+00  , 7.16467362e-01,
    -2.40961982e+00 , -2.37642154e+00 ,  1.49284766e+00 ,  2.45607929e+00,
    -1.11501624e+00 ,  1.78338330e+00 , -3.21300747e-01 , -1.81268950e+00,
    -2.33242352e+00 , -8.73296228e-01 ,  9.15275392e-01 ,  1.08077844e+00,
    9.91291676e-02  , 2.44602490e+00  , 6.74977605e-01  ,-1.69091803e+00,
    -8.39444324e-01 , -1.74066440e+00 ,  2.29238838e+00 , -1.38944227e+00,
    7.59198197e-01  ,-1.84923448e+00  ,-2.81710652e-01  , 1.72856521e+00,
    -2.50000000e+00 , -2.50000000e+00 , -2.50000000e+00 , -2.50000000e+00,
    -2.50000000e+00 , -2.50000000e+00 , -2.50000000e+00 , -2.50000000e+00,
    -2.50000000e+00 , -2.50000000e+00 , -2.50000000e+00 , -2.50000000e+00,
    -2.50000000e+00 , -2.50000000e+00 , -2.50000000e+00 , -2.50000000e+00,
    2.50000000e+00  , 2.50000000e+00  , 2.50000000e+00  , 2.50000000e+00,
    2.50000000e+00  , 2.50000000e+00  , 2.50000000e+00  , 2.50000000e+00,
    2.50000000e+00  , 2.50000000e+00  , 2.50000000e+00  , 2.50000000e+00,
    2.50000000e+00  , 2.50000000e+00  , 2.50000000e+00  , 2.50000000e+00,
    -1.50020092e-02 ,  4.16422021e-01 ,  1.08236781e+00 , -8.71552130e-01,
    -9.77648991e-01 ,  2.34318981e-01 ,  1.53928263e+00 ,  1.16780761e+00,
    7.98745812e-01  ,-1.77783877e+00  , 2.40074783e+00  , 2.12046024e+00,
    1.15114644e+00  , 2.91142388e-01  , 2.21077920e+00  ,-1.27489025e+00,
    1.22929267e+00  , 1.86817661e+00  , 1.05338143e+00  ,-2.15861163e+00,
    9.02596778e-01  ,-9.55190789e-01  ,-1.82645440e+00  ,-1.97676126e-01,
    -2.31993806e+00 ,  1.59340732e+00 ,  5.98189133e-01 ,  1.63467520e+00,
    1.05902552e+00  , 1.40518020e+00  , 1.14533689e+00  , 2.24391123e-02],
    [
    0.00000000e+00 ,  0.00000000e+00 ,  0.00000000e+00 ,  0.00000000e+00,
    0.00000000e+00 ,  0.00000000e+00 ,  0.00000000e+00 ,  0.00000000e+00,
    0.00000000e+00 ,  0.00000000e+00 ,  0.00000000e+00 ,  0.00000000e+00,
    0.00000000e+00 ,  0.00000000e+00 ,  0.00000000e+00 ,  0.00000000e+00,
    5.00000000e+00 ,  5.00000000e+00 ,  5.00000000e+00 ,  5.00000000e+00,
    5.00000000e+00 ,  5.00000000e+00 ,  5.00000000e+00 ,  5.00000000e+00,
    5.00000000e+00 ,  5.00000000e+00 ,  5.00000000e+00 ,  5.00000000e+00,
    5.00000000e+00 ,  5.00000000e+00 ,  5.00000000e+00 ,  5.00000000e+00,
    3.17258415e+00 ,  4.62450771e+00 ,  4.98408171e+00 ,  4.66020932e+00,
    2.19154864e+00 ,  7.28670643e-01 ,  4.25099775e+00 ,  1.78580576e-01,
    1.72299262e+00 ,  1.40616121e+00 ,  6.60385869e-01 ,  1.71722067e-01,
    2.29655038e+00 ,  2.69592243e-01 ,  1.28575808e+00 ,  2.99798673e+00,
    4.24608537e+00 ,  4.53883635e+00 ,  4.27060410e+00 ,  2.18527242e+00,
    4.81562282e+00 ,  4.47860617e+00 ,  8.85576525e-01 ,  6.11896058e-02,
    4.39833141e+00 ,  3.39636449e+00 ,  2.17503743e+00 ,  3.58292445e-01,
    4.44240381e+00 ,  1.59920137e+00 ,  1.81243621e+00 ,  2.62498790e+00,
    2.03964291e+00 ,  1.66755231e+00 ,  1.29083801e+00 ,  3.23729080e+00,
    2.79747336e-01 ,  4.99104006e+00 ,  1.69652769e+00 ,  2.43792650e+00,
    3.72388012e+00 ,  3.86471378e+00 ,  3.97348857e+00 ,  1.84021289e+00,
    4.61843562e+00 ,  4.78064027e-01 ,  3.28810643e+00 ,  4.88020197e+00,
    2.26961617e+00 ,  1.41917712e+00 ,  3.45450677e+00 ,  1.61421300e+00,
    3.89483857e+00 ,  3.74266540e+00 ,  4.25361343e+00 ,  2.07885289e+00,
    4.68502063e+00 ,  2.47941623e+00 ,  3.27935812e+00 ,  1.88576482e+00,
    1.35700135e+00 ,  3.54465292e-01 ,  1.98629766e+00 ,  4.76830988e+00],
    [
    -2.44322735e+00 ,  9.29604552e-01 , -4.42362679e-01 , -1.40076428e+00,
    -3.42348577e-01 ,  1.41170704e+00 , -1.65513786e+00 , -5.95805295e-01,
    -1.72338292e-01 ,  4.84405707e-01 , -8.10286287e-02 , -1.57171612e+00,
    1.28640464e+00  ,-1.69772122e+00  , 4.79229257e-03  , 2.28395067e+00,
    1.07290898e+00  , 1.94534364e+00  , 8.15391027e-01  ,-2.22141770e+00,
    -2.06975134e+00 , -6.35168940e-01 , -2.96965059e-01 , -2.28553965e+00,
    -3.51977873e-01 , -1.17095814e+00 , -2.34200832e+00 ,  6.14901485e-01,
    -1.77446710e+00 , -1.11755170e+00 ,  2.41216283e+00 , -1.03949314e+00,
    9.12707122e-01  ,-2.18879351e+00  ,-1.60602715e+00  ,-5.84007300e-01,
    -1.68877938e-01 ,  2.26219901e+00 , -2.45356416e+00 , -4.21372006e-01,
    -5.48919219e-01 , -1.77288863e+00 ,  2.20341745e+00 ,  7.48992802e-01,
    -4.91465993e-02 ,  5.98421393e-01 , -1.84263072e+00 , -2.30814074e+00,
    -1.14263001e-01 ,  2.68258888e-01 ,  1.89068561e+00 ,  8.95934839e-01,
    -3.09404768e-01 ,  4.05874624e-01 ,  2.45072264e+00 , -1.11972026e+00,
    1.05646691e+00  , 2.24186496e+00  ,-1.16576763e+00  ,-4.37399017e-01,
    -3.34952863e-01 ,  3.26410344e-01 , -5.88709438e-01 , -2.35397416e+00,
    -2.50000000e+00 , -2.50000000e+00 , -2.50000000e+00 , -2.50000000e+00,
    -2.50000000e+00 , -2.50000000e+00 , -2.50000000e+00 , -2.50000000e+00,
    -2.50000000e+00 , -2.50000000e+00 , -2.50000000e+00 , -2.50000000e+00,
    -2.50000000e+00 , -2.50000000e+00 , -2.50000000e+00 , -2.50000000e+00,
    2.50000000e+00  , 2.50000000e+00  , 2.50000000e+00  , 2.50000000e+00,
    2.50000000e+00  , 2.50000000e+00  , 2.50000000e+00  , 2.50000000e+00,
    2.50000000e+00  , 2.50000000e+00  , 2.50000000e+00  , 2.50000000e+00,
    2.50000000e+00  , 2.50000000e+00  , 2.50000000e+00  , 2.50000000e+00],
    [
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
    1.00000000e+00,   1.00000000e+00,   1.00000000e+00,   1.00000000e+00]])

def camera_test_set1():
    return [
        make_camera([0, 1, -16], [0, 0, 0], [0, 1, 0], pi / 2 * 1.2, 2000, 600),
        make_camera([1, 3, -11], [0, 0, 0], [0, 1, 0], pi / 2 * 1.1, 640, 480),
        make_camera([2, 5, -7], [0, 0, 0], [0, 1, 0], pi / 2 * 1.0, 1000, 1000),
        make_camera([9, 2, -3], [0, 0, 0], [0, 1, 0], pi / 2 * 0.9, 1280, 720),
        make_camera([7, 5, -2], [0, 0, 0], [0, 1, 0], pi / 2 * 0.8, 1920, 1080),
        make_camera([0, 15, 0], [0, 0, 0], [1, 0, 0], pi / 2 * 0.7, 1280, 720),
        make_camera([20, 2.5, 3], [0, 0, 0], [0, 1, 0], pi / 2 * 0.6, 1280, 720),
        make_camera([-9, 10, 6], [0, 0, 0], [0, 1, 0], pi / 2 * 0.7, 1280, 720),
        make_camera([-8, 2.5, -9], [0, 0, 0], [0, 1, 0], pi / 2 * 1.0, 1280, 720),
        make_camera([-7, 3.5, 11], [0, 0, 0], [0, 1, 0], pi / 2 * 1.4, 1920, 1080),
        make_camera([-1, 0, 15], [0, 0, 0], [0, 1, 0], pi / 2 * 1.0, 1280, 720)]

def print_matrix(M):
    n, m = M.shape

    for i in range(n):
        print(' '.join(['{:8.2g}'.format(M[i, j]) for j in range(m)]))

